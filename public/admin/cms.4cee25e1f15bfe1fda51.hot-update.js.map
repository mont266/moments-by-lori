{"version":3,"file":"cms.4cee25e1f15bfe1fda51.hot-update.js","sources":["webpack:///./src/components/Gallery.js"],"sourcesContent":["import React, { Component, Fragment } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { graphql } from 'gatsby'\r\nimport { PhotoSwipe } from 'react-photoswipe'\r\nimport Image from './Image'\r\nimport Grid from '../components/Grid'\r\nimport * as S from '../components/Columns/styled'\r\n\r\nimport _kebabCase from 'lodash/kebabCase'\r\n\r\nimport './Gallery.css'\r\nimport 'react-photoswipe/lib/photoswipe.css'\r\n\r\nexport const query = graphql`\r\n  fragment Gallery on MarkdownRemark {\r\n    frontmatter {\r\n      gallery {\r\n        alt\r\n        image\r\n        title\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nexport default class Gallery extends Component {\r\n  state = {\r\n    loaded: false,\r\n    isOpen: false,\r\n    sliderImages: [],\r\n    index: 0\r\n  }\r\n\r\n  isOpen(isOpen, index) {\r\n    if (typeof index === 'undefined') index = 0\r\n    this.setState({ isOpen, index })\r\n  }\r\n  handleKeyDown = ev => {\r\n    if (ev.keyCode === 13 && !this.state.isOpen) {\r\n      // enter to open\r\n      this.isOpen(true, this.state.index)\r\n    }\r\n  }\r\n\r\n  getImageInfo = (img, index) =>\r\n    fetch(img.image + '-/json/')\r\n      .then(res => res.json())\r\n      .then(\r\n        result => {\r\n          const newImagesArr = [...this.state.sliderImages]\r\n          newImagesArr[index] = {\r\n            src: img.image,\r\n            title: img.title,\r\n            w: result.width,\r\n            h: result.height\r\n          }\r\n          this.setState({\r\n            sliderImages: newImagesArr\r\n          })\r\n          return true\r\n        },\r\n        error => {\r\n          console.log(error)\r\n          return false\r\n        }\r\n      )\r\n\r\n  componentDidMount() {\r\n    const { images } = this.props,\r\n      maxCount = images.length\r\n    let loopCount = 1\r\n\r\n    for (let i in images) {\r\n      if (this.getImageInfo(images[i], i)) {\r\n        this.setState({ loaded: loopCount === maxCount })\r\n        loopCount++\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { images } = this.props\r\n    return (\r\n      <div>\r\n          {images && images.length > 0 && (\r\n            <div>\r\n              {images.map((image, index) => (\r\n                <S.ImageColumn>\r\n                  <S.PostItemWrapper>\r\n                    <div\r\n                      className=\"Gallery--Item\"\r\n                      key={_kebabCase(image.alt) + '-' + index}\r\n                      onClick={() => this.isOpen(true, index)}\r\n                      onKeyDown={this.handleKeyDown}\r\n                      tabIndex={0}\r\n                      aria-label=\"Toggle Gallery\"\r\n                      role=\"button\"\r\n                    >\r\n                      <div>\r\n                        <Image\r\n                          resolutions=\"small\"\r\n                          src={image.image}\r\n                          alt={image.alt}\r\n                        />\r\n                      </div>\r\n                      {image.title && <figcaption>{image.title}</figcaption>}\r\n                    </div>\r\n                  </S.PostItemWrapper>\r\n                </S.ImageColumn>\r\n              ))}\r\n            </div>\r\n          )}\r\n        {this.state.loaded && this.state.sliderImages.length > 0 && (\r\n          <PhotoSwipe\r\n            isOpen={this.state.isOpen}\r\n            items={this.state.sliderImages}\r\n            options={{\r\n              index: this.state.index,\r\n              history: false\r\n            }}\r\n            onClose={() => this.isOpen(false)}\r\n          />\r\n        )}\r\n        </div>\r\n    )\r\n  }\r\n}\r\n\r\nGallery.propTypes = {\r\n  images: PropTypes.array.isRequired\r\n}\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAWA;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AAJA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;AAJA;AACA;AAKA;AACA;AADA;AACA;AAEA;AACA;AAEA;AACA;AACA;AApBA;AACA;;;;;;AAZA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AA8BA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AADA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAnBA;AA4BA;AACA;AACA;AACA;AACA;AAFA;AAIA;AAAA;AAAA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;AACA;;;;;;;;AArGA;AACA;AADA;AAuGA;AACA;AADA;;;;;;;;;;AAnHA;AAYA;;;;;;;;;;;;;A","sourceRoot":""}